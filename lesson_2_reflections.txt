What happens when you initialize a repository? Why do you need to do it?

Creates a repository for my Git commits. So I have a way to track changes to my files--or commits.  

git init = initializes a repository 
ls -a = lets me see the .git repository 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area is where I can move my files into from the working directory but before I want them to go into the repository. It offers the value of being able to control precisely which files get committed to my repository instead of just moving every file from my working directory into my repository. 

Files move in this flow:

Working directory ---> Staging ---> Repository 

Everything that’s in stage is committed together into my repository. 

git diff = tells me diff between working directory and stage
git diff --staged = diff between stage and most recent commit in repository
git diff commit id (original) commit id (newer) = diff between commits in repository 


How can you use the staging area to make sure you have one commit per logical
change?
Stage lets me group changes I made in my working directory into logically grouped commits. So I can have one commit that includes more than one tweak vs. having multiple commits for every single change made in the working directory. 


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
I want to experiment with some new code changes or create a different language version but don’t want to change my main branch. Without branches I would have to checkout back to older commits and keep track of which commit is my main—that would get clunky and hard to keep organized. 


How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

All the commands I know:

