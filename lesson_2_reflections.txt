What happens when you initialize a repository? Why do you need to do it?

Creates a repository for my Git commits. So I have a way to track changes to my files--or commits.  

git init = initializes a repository 
ls -a = lets me see the .git repository 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area is where I can move my files into from the working directory but before I want them to go into the repository. It offers the value of being able to control precisely which files get committed to my repository instead of just moving every file from my working directory into my repository. 

Files move in this flow:

Working directory ---> Staging ---> Repository 

Everything that’s in stage is committed together into my repository. 

git diff = tells me diff between working directory and stage
git diff --staged = diff between stage and most recent commit in repository
git diff commit id (original) commit id (newer) = diff between commits in repository 


How can you use the staging area to make sure you have one commit per logical
change?
Stage lets me group changes I made in my working directory into logically grouped commits. So I can have one commit that includes more than one tweak vs. having multiple commits for every single change made in the working directory. 


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
I want to experiment with some new code changes or create a different language version but don’t want to change my main branch. Without branches I would have to checkout back to older commits and keep track of which commit is my main—that would get clunky and hard to keep organized. 


How do the diagrams help you visualize the branch structure?
The diagrams help me see where the branches break off from each other and the history of each branch’s commits.

What is Detached Head State?
This only happens when I checkout a commit, not a branch. It is when I have a commit that is not included in any branches. This is not good, because this commit will not show up in any git log commands. If I want to create a new branch to retain this commit I would have to run git branch new_branch_name and then running git checkout new_branch name. INSTEAD, I can just use 
git checkout -b new_branch_name

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
They become one branch.

How do you merge two branches?
1. Ensure I’m on the master branch (git checkout master) or the opposite of this if I want to merge master with my other branch, i.e. merge master in with a branch I want to commit. 
2. Run git merge master + [other branch name]
3. I can run git show [commit id] to see a commit vs. its parent only. By parent we mean the exact commit that came before it on the same branch. Otherwise, running git diff [commit id original][commit id newer] would show me all the diffs that happened in between them on different branches and would create a long diff history. 
4. Delete the old branch (aka other branch name) since it is no longer needed by running git branch -d [branch name I want to delete]

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
Automatic merging is fast and easy, manual merges allow you to carefully choose which changes from which branch go into the final commit. 

All the commands I know:

cd .. = moves me up a directory
ls -a = lets me see the .git repository within my working directory 
pwd = print working directory / tells me where I am
cd [folder name] = moves me into the folder
git clone = lets me clone a repository 
git init = creates a git repository 
git branch = shows me the branches
git status = tells me the status (modified) of which files in stage
git diff = tells me diff between working directory and stage
git diff --staged = diff between stage and most recent commit in repository
git diff commit id (original) commit id (newer) = diff between commits in repository 
git add [file name] 
git commit
git checkout = lets me switch between commits or branches (git branch)
git log —-graph —-oneline = short and readable way to view my commit history 
git show [commit id] = will show me changes made to a commit against its parent aka compare a commit with its parent, without having to know what the parent is
git log -n1 = shows me only 1 commit


